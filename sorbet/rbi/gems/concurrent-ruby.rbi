# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/concurrent-ruby/all/concurrent-ruby.rbi
#
# concurrent-ruby-1.1.6

module Concurrent
  def monotonic_time; end
  def self.create_simple_logger(level = nil, output = nil); end
  def self.create_stdlib_logger(level = nil, output = nil); end
  def self.disable_at_exit_handlers!; end
  def self.executor(executor_identifier); end
  def self.global_fast_executor; end
  def self.global_immediate_executor; end
  def self.global_io_executor; end
  def self.global_logger; end
  def self.global_logger=(value); end
  def self.global_timer_set; end
  def self.monotonic_time; end
  def self.new_fast_executor(opts = nil); end
  def self.new_io_executor(opts = nil); end
  def self.physical_processor_count; end
  def self.processor_count; end
  def self.processor_counter; end
  def self.use_simple_logger(level = nil, output = nil); end
  def self.use_stdlib_logger(level = nil, output = nil); end
  extend Concurrent::Concern::Deprecation
  extend Concurrent::Concern::Logging
  extend Concurrent::Utility::EngineDetector
  extend Concurrent::Utility::NativeExtensionLoader
end
module Concurrent::Utility
end
module Concurrent::Utility::EngineDetector
  def on_cruby?; end
  def on_jruby?; end
  def on_jruby_9000?; end
  def on_linux?; end
  def on_osx?; end
  def on_rbx?; end
  def on_truffleruby?; end
  def on_windows?; end
  def ruby_engine; end
  def ruby_version(version = nil, comparison, major, minor, patch); end
end
module Concurrent::Synchronization
end
class Concurrent::Synchronization::AbstractObject
  def full_memory_barrier; end
  def initialize; end
  def self.attr_volatile(*names); end
end
module Concurrent::Utility::NativeExtensionLoader
  def allow_c_extensions?; end
  def c_extensions_loaded?; end
  def java_extensions_loaded?; end
  def load_error_path(error); end
  def load_native_extensions; end
  def set_c_extensions_loaded; end
  def set_java_extensions_loaded; end
  def try_load_c_extension(path); end
end
module Concurrent::Synchronization::MriAttrVolatile
  def full_memory_barrier; end
  def self.included(base); end
end
module Concurrent::Synchronization::MriAttrVolatile::ClassMethods
  def attr_volatile(*names); end
end
class Concurrent::Synchronization::MriObject < Concurrent::Synchronization::AbstractObject
  def initialize; end
  extend Concurrent::Synchronization::MriAttrVolatile::ClassMethods
  include Concurrent::Synchronization::MriAttrVolatile
end
module Concurrent::Synchronization::RbxAttrVolatile
  def full_memory_barrier; end
  def self.included(base); end
end
module Concurrent::Synchronization::RbxAttrVolatile::ClassMethods
  def attr_volatile(*names); end
end
class Concurrent::Synchronization::RbxObject < Concurrent::Synchronization::AbstractObject
  def initialize; end
  extend Concurrent::Synchronization::RbxAttrVolatile::ClassMethods
  include Concurrent::Synchronization::RbxAttrVolatile
end
module Concurrent::Synchronization::TruffleRubyAttrVolatile
  def full_memory_barrier; end
  def self.included(base); end
end
module Concurrent::Synchronization::TruffleRubyAttrVolatile::ClassMethods
  def attr_volatile(*names); end
end
class Concurrent::Synchronization::TruffleRubyObject < Concurrent::Synchronization::AbstractObject
  def initialize; end
  extend Concurrent::Synchronization::TruffleRubyAttrVolatile::ClassMethods
  include Concurrent::Synchronization::TruffleRubyAttrVolatile
end
class Concurrent::Synchronization::Object < Concurrent::Synchronization::MriObject
  def __initialize_atomic_fields__; end
  def initialize; end
  def self.atomic_attribute?(name); end
  def self.atomic_attributes(inherited = nil); end
  def self.attr_atomic(*names); end
  def self.define_initialize_atomic_fields; end
  def self.ensure_safe_initialization_when_final_fields_are_present; end
  def self.safe_initialization!; end
  def self.safe_initialization?; end
end
class Concurrent::Synchronization::AbstractLockableObject < Concurrent::Synchronization::Object
  def ns_broadcast; end
  def ns_signal; end
  def ns_wait(timeout = nil); end
  def ns_wait_until(timeout = nil, &condition); end
  def synchronize; end
end
module Concurrent::Synchronization::ConditionSignalling
  def ns_broadcast; end
  def ns_signal; end
end
class Concurrent::Synchronization::MutexLockableObject < Concurrent::Synchronization::AbstractLockableObject
  def initialize(*defaults); end
  def ns_wait(timeout = nil); end
  def self.new(*args, &block); end
  def synchronize; end
  include Concurrent::Synchronization::ConditionSignalling
end
class Concurrent::Synchronization::MonitorLockableObject < Concurrent::Synchronization::AbstractLockableObject
  def initialize(*defaults); end
  def ns_wait(timeout = nil); end
  def self.new(*args, &block); end
  def synchronize; end
  include Concurrent::Synchronization::ConditionSignalling
end
class Concurrent::Synchronization::RbxLockableObject < Concurrent::Synchronization::AbstractLockableObject
  def initialize(*defaults); end
  def ns_broadcast; end
  def ns_signal; end
  def ns_wait(timeout = nil); end
  def self.new(*args, &block); end
  def synchronize(&block); end
end
class Concurrent::Synchronization::LockableObject < Concurrent::Synchronization::MutexLockableObject
  def new_condition; end
end
class Concurrent::Synchronization::Condition < Concurrent::Synchronization::LockableObject
  def broadcast; end
  def initialize(lock); end
  def ns_broadcast; end
  def ns_signal; end
  def ns_wait(timeout = nil); end
  def ns_wait_until(timeout = nil, &condition); end
  def self.new(*args, &block); end
  def self.private_new(*args, &block); end
  def signal; end
  def wait(timeout = nil); end
  def wait_until(timeout = nil, &condition); end
end
class Concurrent::Synchronization::Lock < Concurrent::Synchronization::LockableObject
  def broadcast; end
  def ns_broadcast; end
  def ns_signal; end
  def ns_wait(timeout = nil); end
  def ns_wait_until(timeout = nil, &condition); end
  def signal; end
  def synchronize; end
  def wait(timeout = nil); end
  def wait_until(timeout = nil, &condition); end
end
module Concurrent::Collection
end
class Concurrent::Collection::NonConcurrentMapBackend
  def [](key); end
  def []=(key, value); end
  def _get(key); end
  def _set(key, value); end
  def clear; end
  def compute(key); end
  def compute_if_absent(key); end
  def compute_if_present(key); end
  def delete(key); end
  def delete_pair(key, value); end
  def dupped_backend; end
  def each_pair; end
  def get_and_set(key, value); end
  def get_or_default(key, default_value); end
  def initialize(options = nil); end
  def initialize_copy(other); end
  def key?(key); end
  def merge_pair(key, value); end
  def pair?(key, expected_value); end
  def replace_if_exists(key, new_value); end
  def replace_pair(key, old_value, new_value); end
  def size; end
  def store_computed_value(key, new_value); end
end
class Concurrent::Collection::MriMapBackend < Concurrent::Collection::NonConcurrentMapBackend
  def []=(key, value); end
  def clear; end
  def compute(key); end
  def compute_if_absent(key); end
  def compute_if_present(key); end
  def delete(key); end
  def delete_pair(key, value); end
  def get_and_set(key, value); end
  def initialize(options = nil); end
  def merge_pair(key, value); end
  def replace_if_exists(key, new_value); end
  def replace_pair(key, old_value, new_value); end
end
class Concurrent::Map < Concurrent::Collection::MriMapBackend
  def [](key); end
  def each; end
  def each_key; end
  def each_pair; end
  def each_value; end
  def empty?; end
  def fetch(key, default_value = nil); end
  def fetch_or_store(key, default_value = nil); end
  def get(key); end
  def initialize(options = nil, &block); end
  def initialize_copy(other); end
  def inspect; end
  def key(value); end
  def keys; end
  def marshal_dump; end
  def marshal_load(hash); end
  def populate_from(hash); end
  def put(key, value); end
  def put_if_absent(key, value); end
  def raise_fetch_no_key; end
  def validate_options_hash!(options); end
  def value?(value); end
  def values; end
end
class Concurrent::Error < StandardError
end
class Concurrent::ConfigurationError < Concurrent::Error
end
class Concurrent::CancelledOperationError < Concurrent::Error
end
class Concurrent::LifecycleError < Concurrent::Error
end
class Concurrent::ImmutabilityError < Concurrent::Error
end
class Concurrent::IllegalOperationError < Concurrent::Error
end
class Concurrent::InitializationError < Concurrent::Error
end
class Concurrent::MaxRestartFrequencyError < Concurrent::Error
end
class Concurrent::MultipleAssignmentError < Concurrent::Error
  def initialize(message = nil, inspection_data = nil); end
  def inspect; end
  def inspection_data; end
end
class Concurrent::RejectedExecutionError < Concurrent::Error
end
class Concurrent::ResourceLimitError < Concurrent::Error
end
class Concurrent::TimeoutError < Concurrent::Error
end
class Concurrent::MultipleErrors < Concurrent::Error
  def errors; end
  def initialize(errors, message = nil); end
end
class Concurrent::Collection::CopyOnWriteObserverSet < Concurrent::Synchronization::LockableObject
  def add_observer(observer = nil, func = nil, &block); end
  def clear_observers_and_return_old; end
  def count_observers; end
  def delete_observer(observer); end
  def delete_observers; end
  def initialize; end
  def notify_and_delete_observers(*args, &block); end
  def notify_observers(*args, &block); end
  def notify_to(observers, *args); end
  def ns_initialize; end
  def observers; end
  def observers=(new_set); end
end
class Concurrent::Event < Concurrent::Synchronization::LockableObject
  def initialize; end
  def ns_initialize; end
  def ns_set; end
  def reset; end
  def set; end
  def set?; end
  def try?; end
  def wait(timeout = nil); end
end
module Concurrent::Concern
end
module Concurrent::Concern::Dereferenceable
  def apply_deref_options(value); end
  def deref; end
  def ns_set_deref_options(opts); end
  def set_deref_options(opts = nil); end
  def value; end
  def value=(value); end
end
module Concurrent::Concern::Obligation
  def compare_and_set_state(next_state, *expected_current); end
  def complete?; end
  def event; end
  def exception(*args); end
  def fulfilled?; end
  def get_arguments_from(opts = nil); end
  def if_state(*expected_states); end
  def incomplete?; end
  def init_obligation; end
  def no_error!(timeout = nil); end
  def ns_check_state?(expected); end
  def ns_set_state(value); end
  def pending?; end
  def realized?; end
  def reason; end
  def rejected?; end
  def set_state(success, value, reason); end
  def state; end
  def state=(value); end
  def unscheduled?; end
  def value!(timeout = nil); end
  def value(timeout = nil); end
  def wait!(timeout = nil); end
  def wait(timeout = nil); end
  include Concurrent::Concern::Dereferenceable
end
class Concurrent::Collection::CopyOnNotifyObserverSet < Concurrent::Synchronization::LockableObject
  def add_observer(observer = nil, func = nil, &block); end
  def count_observers; end
  def delete_observer(observer); end
  def delete_observers; end
  def duplicate_and_clear_observers; end
  def duplicate_observers; end
  def initialize; end
  def notify_and_delete_observers(*args, &block); end
  def notify_observers(*args, &block); end
  def notify_to(observers, *args); end
  def ns_initialize; end
end
module Concurrent::Concern::Observable
  def add_observer(observer = nil, func = nil, &block); end
  def count_observers; end
  def delete_observer(observer); end
  def delete_observers; end
  def observers; end
  def observers=(arg0); end
  def with_observer(observer = nil, func = nil, &block); end
end
class Concurrent::IVar < Concurrent::Synchronization::LockableObject
  def add_observer(observer = nil, func = nil, &block); end
  def check_for_block_or_value!(block_given, value); end
  def complete(success, value, reason); end
  def complete_without_notification(success, value, reason); end
  def fail(reason = nil); end
  def initialize(value = nil, opts = nil, &block); end
  def notify_observers(value, reason); end
  def ns_complete_without_notification(success, value, reason); end
  def ns_initialize(value, opts); end
  def safe_execute(task, args = nil); end
  def set(value = nil); end
  def try_set(value = nil, &block); end
  include Concurrent::Concern::Obligation
  include Concurrent::Concern::Observable
end
class Concurrent::SafeTaskExecutor < Concurrent::Synchronization::LockableObject
  def execute(*args); end
  def initialize(task, opts = nil); end
end
module Concurrent::Concern::Logging
  def log(level, progname, message = nil, &block); end
  include Logger::Severity
end
module Concurrent::Concern::Deprecation
  def deprecated(message, strip = nil); end
  def deprecated_method(old_name, new_name); end
  extend Concurrent::Concern::Deprecation
  include Concurrent::Concern::Logging
end
module Concurrent::ExecutorService
  def <<(task); end
  def can_overflow?; end
  def post(*args, &task); end
  def serialized?; end
  include Concurrent::Concern::Logging
end
class Concurrent::AbstractExecutorService < Concurrent::Synchronization::LockableObject
  def auto_terminate=(value); end
  def auto_terminate?; end
  def fallback_policy; end
  def handle_fallback(*args); end
  def initialize(opts = nil, &block); end
  def kill; end
  def name; end
  def ns_auto_terminate?; end
  def ns_execute(*args, &task); end
  def ns_kill_execution; end
  def ns_shutdown_execution; end
  def running?; end
  def shutdown; end
  def shutdown?; end
  def shuttingdown?; end
  def to_s; end
  def wait_for_termination(timeout = nil); end
  include Concurrent::Concern::Deprecation
  include Concurrent::ExecutorService
end
module Concurrent::SerialExecutorService
  def serialized?; end
  include Concurrent::ExecutorService
end
class Concurrent::ImmediateExecutor < Concurrent::AbstractExecutorService
  def <<(task); end
  def initialize; end
  def kill; end
  def post(*args, &task); end
  def running?; end
  def shutdown; end
  def shutdown?; end
  def shuttingdown?; end
  def wait_for_termination(timeout = nil); end
  include Concurrent::SerialExecutorService
end
class Concurrent::Delay < Concurrent::Synchronization::LockableObject
  def execute_task_once; end
  def initialize(opts = nil, &block); end
  def ns_initialize(opts, &block); end
  def reconfigure(&block); end
  def value!(timeout = nil); end
  def value(timeout = nil); end
  def wait(timeout = nil); end
  include Concurrent::Concern::Obligation
end
module Concurrent::AtomicNumericCompareAndSetWrapper
  def compare_and_set(old_value, new_value); end
end
class Concurrent::MutexAtomicReference < Concurrent::Synchronization::LockableObject
  def _compare_and_set(old_value, new_value); end
  def compare_and_swap(old_value, new_value); end
  def get; end
  def get_and_set(new_value); end
  def initialize(value = nil); end
  def ns_initialize(value); end
  def set(new_value); end
  def swap(new_value); end
  def value; end
  def value=(new_value); end
  include Concurrent::AtomicDirectUpdate
  include Concurrent::AtomicNumericCompareAndSetWrapper
end
module Concurrent::AtomicDirectUpdate
  def try_update!; end
  def try_update; end
  def update; end
end
class Concurrent::ConcurrentUpdateError < ThreadError
end
class Concurrent::AtomicReference < Concurrent::MutexAtomicReference
  def inspect; end
  def to_s; end
end
class Concurrent::RubyExecutorService < Concurrent::AbstractExecutorService
  def initialize(*args, &block); end
  def kill; end
  def ns_running?; end
  def ns_shutdown?; end
  def ns_shutdown_execution; end
  def ns_shuttingdown?; end
  def post(*args, &task); end
  def shutdown; end
  def stop_event; end
  def stopped_event; end
  def wait_for_termination(timeout = nil); end
end
class Concurrent::RubyThreadPoolExecutor < Concurrent::RubyExecutorService
  def can_overflow?; end
  def completed_task_count; end
  def idletime; end
  def initialize(opts = nil); end
  def largest_length; end
  def length; end
  def max_length; end
  def max_queue; end
  def min_length; end
  def ns_add_busy_worker; end
  def ns_assign_worker(*args, &task); end
  def ns_enqueue(*args, &task); end
  def ns_execute(*args, &task); end
  def ns_initialize(opts); end
  def ns_kill_execution; end
  def ns_limited_queue?; end
  def ns_prune_pool; end
  def ns_ready_worker(worker, success = nil); end
  def ns_remove_busy_worker(worker); end
  def ns_reset_if_forked; end
  def ns_shutdown_execution; end
  def ns_worker_died(worker); end
  def ns_worker_not_old_enough(worker); end
  def queue_length; end
  def ready_worker(worker); end
  def remaining_capacity; end
  def remove_busy_worker(worker); end
  def scheduled_task_count; end
  def worker_died(worker); end
  def worker_not_old_enough(worker); end
  def worker_task_completed; end
end
class Concurrent::RubyThreadPoolExecutor::Worker
  def <<(message); end
  def create_worker(queue, pool, idletime); end
  def initialize(pool, id); end
  def kill; end
  def run_task(pool, task, args); end
  def stop; end
  include Concurrent::Concern::Logging
end
class Concurrent::ThreadPoolExecutor < Concurrent::RubyThreadPoolExecutor
end
class Concurrent::CachedThreadPool < Concurrent::ThreadPoolExecutor
  def initialize(opts = nil); end
  def ns_initialize(opts); end
end
class Concurrent::Utility::ProcessorCounter
  def compute_physical_processor_count; end
  def compute_processor_count; end
  def initialize; end
  def physical_processor_count; end
  def processor_count; end
end
module Concurrent::Options
  def self.executor(executor_identifier); end
  def self.executor_from_options(opts = nil); end
end
class Concurrent::PromiseExecutionError < StandardError
end
class Concurrent::Promise < Concurrent::IVar
  def catch(&block); end
  def complete(success, value, reason); end
  def execute; end
  def fail(reason = nil); end
  def flat_map(&block); end
  def initialize(opts = nil, &block); end
  def notify_child(child); end
  def ns_initialize(value, opts); end
  def on_error(&block); end
  def on_fulfill(result); end
  def on_reject(reason); end
  def on_success(&block); end
  def realize(task); end
  def rescue(&block); end
  def root?; end
  def self.aggregate(method, *promises); end
  def self.all?(*promises); end
  def self.any?(*promises); end
  def self.execute(opts = nil, &block); end
  def self.fulfill(value, opts = nil); end
  def self.reject(reason, opts = nil); end
  def self.zip(*promises); end
  def set(value = nil, &block); end
  def set_pending; end
  def set_state!(success, value, reason); end
  def synchronized_set_state!(success, value, reason); end
  def then(*args, &block); end
  def zip(*others); end
end
